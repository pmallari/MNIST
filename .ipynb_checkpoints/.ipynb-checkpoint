{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# MNIST Hyper Parameter Test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, import modules. This includes<br>numpy for computations<br>pandas for data handling<br>matplotlib for display<br>scikit learn for machine learning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.datasets import fetch_mldata\n",
    "from sklearn.model_selection import train_test_split, cross_val_score\n",
    "from sklearn.metrics import confusion_matrix, accuracy_score\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.externals import joblib\n",
    "from tqdm import tqdm\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "sklearn.datasets.fetch_mldata imports datasets found in scikitlearn's database."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import data\n",
    "\n",
    "mnist = fetch_mldata('MNIST original')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Separate the image and labels. The image comes unrolled into a 784 points (28x28 unrolled)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Separate data and labels\n",
    "\n",
    "mnist_data = mnist['data']\n",
    "mnist_target = mnist['target']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Scaling the data to have inputs between -1 and 1 helps improve the model's accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\princ\\AppData\\Local\\Continuum\\anaconda3\\envs\\tensorflow\\lib\\site-packages\\sklearn\\utils\\validation.py:475: DataConversionWarning: Data with input dtype uint8 was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n"
     ]
    }
   ],
   "source": [
    "#Scale mnist data\n",
    "\n",
    "scaler = StandardScaler()\n",
    "scaler.fit(mnist_data)\n",
    "mnist_data_scaled = scaler.transform(mnist_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The dataset is split in 80% training data and 20% test data. The dataset is stratified during splitting so the training data is evenly distributed among the target values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Stratified split of data set to train and test. Allot 20% for test sey\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(mnist_data_scaled, \n",
    "                                                    mnist_target, \n",
    "                                                    stratify=mnist_target, \n",
    "                                                    test_size=0.2,\n",
    "                                                    random_state = 42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Run a loop to identify which combination of parameters returns the highest accuracy measure."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Initiate K Nearest Neighbors model\n",
    "\n",
    "knn_clf_unif_p1 = KNeighborsClassifier(n_neighbors = 10, weights = \"uniform\", p=1)\n",
    "knn_clf_unif_p2 = KNeighborsClassifier(n_neighbors = 10, weights = \"uniform\", p=2)\n",
    "knn_clf_dist_p1 = KNeighborsClassifier(n_neighbors = 10, weights = \"distance\", p=1)\n",
    "knn_clf_dist_p2 = KNeighborsClassifier(n_neighbors = 10, weights = \"distance\", p=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "           metric_params=None, n_jobs=1, n_neighbors=10, p=2,\n",
       "           weights='distance')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Train model\n",
    "\n",
    "knn_clf_unif.fit(X_train,y_train)\n",
    "knn_clf_dist.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Predict based on models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|████████████████████████████████████████████████████████████████████████████| 14000/14000 [36:17<00:00,  7.17it/s]\n"
     ]
    }
   ],
   "source": [
    "#Predict \n",
    "y_pred_unif_p1=[]\n",
    "y_pred_unif_p2=[]\n",
    "y_pred_dist_p1=[]\n",
    "y_pred_dist_p2=[]\n",
    "for i in tqdm(range(0,X_test.shape[0])):\n",
    "    y_pred_unif_p1.append(knn_clf_unif_p1.predict(X_test[i,:].reshape(1,-1)))\n",
    "    y_pred_unif_p2.append(knn_clf_unif_p2.predict(X_test[i,:].reshape(1,-1)))\n",
    "    y_pred_dist_p1.append(knn_clf_dist_p1.predict(X_test[i,:].reshape(1,-1)))\n",
    "    y_pred_dist_p2.append(knn_clf_dist_p2.predict(X_test[i,:].reshape(1,-1)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.94   0.9416428571428571\n"
     ]
    }
   ],
   "source": [
    "#Score\n",
    "\n",
    "acc_unif_p1 = accuracy_score(y_pred_unif_p1, y_test)\n",
    "acc_unif_p2 = accuracy_score(y_pred_unif_p2, y_test)\n",
    "acc_dist_p1 = accuracy_score(y_pred_dist_p1, y_test)\n",
    "acc_dist_p2 = accuracy_score(y_pred_dist_p2, y_test)\n",
    "print(\"Uniform manhattan dist: \", acc_unif_p1,\"\\nUniform euclidean dist: \", acc_unif_p2,\n",
    "      \"Distance manhattan dist: \", acc_dist_p1,\"\\nDistance euclidean dist: \", acc_dist_p2)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
